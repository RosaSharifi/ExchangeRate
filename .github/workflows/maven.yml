# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Deploy Exchange Rate Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean install

      - name: Run tests
        run: mvn test

      - name: Archive build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: target/*.jar

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/*.xml

      - name: Notify on failure
        if: failure()
        run: echo "Build failed!"


      # Docker Image build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract version from pom.xml
#      - name: Extract version
#        id: extract_version
#        run: |
#          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: |
#            ${{ secrets.DOCKER_USERNAME }}/exchange_rate:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/exchange_rate:latest
#
#      - name: Log out from Docker Hub
#        run: docker logout